package com.troy.hacktj.server;

import java.io.*;
import java.net.*;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.*;

import com.troy.diplo.game.*;
import com.troy.diplo.util.*;
import com.troy.hacktj.database.DatabaseAccount;
import com.troy.hacktj.net.DiploServerNet;
import com.troy.hacktj.secutiry.Security;
import com.troy.hacktj.settings.*;
import com.troy.hacktjs.commands.*;
import com.troyberry.util.MiscUtil;

public class DiploServer {

	private static final Logger logger = LogManager.getLogger(DiploServer.class);

	private ServerTypeLookupManager manager;
	private DiploServerNet net;
	private ServerSettings settings;

	private static final File DATABASE_FILE = new File("./database.diplo");
	private static final File SETTINGS_FILE = new File("./settings.diplo");

	public DiploServer() {
		Main.serverAccess = this;
		try {
			manager = ServerTypeLookupManager.createOrLoad(DATABASE_FILE);
			settings = SETTINGS_FILE.exists() ? SerializationManager.readObject0(SETTINGS_FILE, ServerSettings.class) : new ServerSettings();
		} catch (Exception e) {
			logger.fatal("Unable to initalize server!");
			e.printStackTrace();
			this.forceShutdown(1);
		}
		this.net = new DiploServerNet(this);
		BackgroundTaskManager.addTask(new RepeatingTask(TimeUnit.HOURS.toMillis(2), () -> {
			try {
				URL whatismyip = new URL("http://checkip.amazonaws.com");
				BufferedReader in = new BufferedReader(new InputStreamReader(whatismyip.openStream()));

				String ip = in.readLine(); // you get the IP as a String
				if (!DiploConstants.ADDRESS.equals(ip)) {
					logger.fatal("CURRENT IP AND DIPLOCONSTANTS IP DONT MATCH!!! " + ip);
				}
			} catch (Exception e) {
				logger.warn("WARNING website down");
			}

		}));

		BackgroundTaskManager.addTask(new RepeatingTask(TimeUnit.MINUTES.toMillis(1), () -> {
			try {
				manager.cleanUp();
			} catch (Exception e) {
				logger.warn("WARNING Failed to autosave:");
				logger.warn(MiscUtil.getStackTrace(e));
			}

		}));
		BackgroundTaskManager.start();
	}

	public boolean containsUser(String username) {
		for (DatabaseAccount account : manager.getLookup(DatabaseAccount.class).getAll()) {
			if (account.getAccount().getUsername().equals(username)) {
				return true;
			}
		}

		return false;
	}

	public final DatabaseAccount areCredentialsValid(String username, char[] password) {
		DatabaseAccount account = getAccount(username);
		if (account == null)
			return null;
		CryptoSettings setting = this.settings.getSetting(CryptoSettings.class);
		byte[] storedHash = account.getHash();
		byte[] computedHash = Security.getHashedPassword(password, account.getSalt(), setting.getPepper(), account.getIterations(), setting.getHashBytes());

		if (Arrays.equals(storedHash, computedHash)) {
			account.onLogin(settings.getSetting(CryptoSettings.class), password);
			return account;
		}
		return null;
	}

	public Account registerUser(String username, char[] password, String email) {
		DatabaseAccount result = Security.createAccount(username, password, email, this);
		manager.getLookup(DatabaseAccount.class).add(result);
		return result.getAccount();
	}

	public boolean removeUser(String username) {
		long id = -1;
		for (DatabaseAccount account : TypeLookupFactory.getInstance().getLookup(DatabaseAccount.class).getAll()) {
			if (account.getAccount().getUsername().equals(username)) {
				id = account.getId();
			}
		}
		if (id == -1)
			return false;
		return removeUser(id);
	}

	public boolean removeUser(long id) {
		return TypeLookupFactory.getInstance().getLookup(DatabaseAccount.class).remove(id);
	}

	public void shutdown() {
		logger.info("Preparing to shutdown server");
		cleanUp();
		logger.info("Server shutdown");
	}

	public void forceShutdown(int code) {
		logger.info("Preparing to force shutdown the server");
		cleanUp();
		logger.info("Server shutdown");
		System.exit(code);
	}

	public void cleanUp() {
		if (net != null)
			net.cleanUp();
		if (manager != null)
			manager.cleanUp();
		if (settings != null) {
			try {
				SerializationManager.writeObject0(settings, SETTINGS_FILE);// Save out settings
			} catch (FileNotFoundException e) {
			}
		}
		BackgroundTaskManager.getInstance().stop();

	}

	public DatabaseAccount getAccount(String username) {
		for (DatabaseAccount account : manager.getLookup(DatabaseAccount.class).getAll()) {
			if (account.getAccount().getUsername().equals(username))
				return account;
		}
		return null;
	}

	public Settings getSettings() {
		return settings;
	}

	public DiploServerNet getNet() {
		return net;
	}
}
