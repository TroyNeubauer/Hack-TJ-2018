package com.troy.hacjtj.base.util;

import java.security.Key;
import java.security.MessageDigest;
import java.util.Arrays;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.hashids.Hashids;

import com.esotericsoftware.kryo.Kryo;
import com.troyberry.util.StringFormatter;

public class HackTJUtils {

	private static MessageDigest SHA256;
	private static Cipher AES;
	private static Key key;
	private static ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>() {
		protected Kryo initialValue() {
			return new Kryo();
		};
	};
	// Only lower case to remove case sensitive issues
	private static final Hashids hash = new Hashids("HackTJ!", 4, "abcdefghijklmnopqrstuvwxyz1234567890");
	static {
		try {
			SHA256 = MessageDigest.getInstance("SHA-256");

			AES = Cipher.getInstance("AES");
			String info = System.getProperty("os.name") + System.getProperty("os.version") + System.getProperty("os.arch");
			SHA256.update("HackTJ is Awesome!".getBytes("UTF-8"));

			byte[] finalBytes = SHA256.digest(info.getBytes());
			finalBytes = Arrays.copyOf(finalBytes, 128 / 8);
			for(int i = 0; i < finalBytes.length; i++){
                System.out.print(StringFormatter.toHexString(finalBytes[i]));
            }
            System.out.println();
            System.out.println(info);

            key = new SecretKeySpec(finalBytes, "AES");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static byte[] encrypt(byte[] data) {
		try {
			AES.init(Cipher.ENCRYPT_MODE, key);
			return AES.doFinal(data);
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}

	}

	public static byte[] decrypt(byte[] data) {
		try {
			AES.init(Cipher.DECRYPT_MODE, key);
			return AES.doFinal(data);
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	public static String encodeID(long id) {
		if (id < 0)
			throw new IllegalArgumentException("Id canot be negative! " + id);
		return hash.encode(id);
	}

	public static long decodeHash(String id) {
		id = id.toLowerCase();// Remove all case issues
		long[] array = hash.decode(id);
		if (array.length != 1)
			throw new IllegalArgumentException("Invalid ID " + id + " decodes to weird array! " + Arrays.toString(array));
		return array[0];
	}

}
