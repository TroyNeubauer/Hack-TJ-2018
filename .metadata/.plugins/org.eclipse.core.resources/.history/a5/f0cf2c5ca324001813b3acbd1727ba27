package com.troy.diplo.game;

import java.beans.*;
import java.io.*;

import com.troyberry.util.MiscUtil;

public class SerializationManager {
	/*
	 * private static final ThreadLocal<Kryo> KRYOS = new ThreadLocal<Kryo>() { protected Kryo initialValue() {
	 * 
	 * Kryo kryo = new Kryo(); //Replace Kryo's Reflection based instantiation strategy with our own Unsafe based one so that we don't need to
	 * specify a no args constructor if(DiploConstants.IS_DESKTOP) { //DiploInternalLog.println("Replacing Kryo's instantiation startegy");
	 * kryo.setInstantiatorStrategy(new InstantiatorStrategy() {
	 * 
	 * @Override public <T> ObjectInstantiator<T> newInstantiatorOf(Class<T> type) {
	 * 
	 * return new ObjectInstantiator<T>() {
	 * 
	 * @SuppressWarnings("restriction")
	 * 
	 * @Override public T newInstance() { try { return (T) MiscUtil.getUnsafe().allocateInstance(type); } catch (InstantiationException e) {
	 * e.printStackTrace(); throw new RuntimeException(e); } } }; } }); } else {
	 * DiploInternalLog.println("Using Kryo's instantiation startegy because this is mobile -_-"); } return kryo; }; };
	 * 
	 * public static Kryo get() { return KRYOS.get(); }
	 * 
	 * public static void init() { // Initializes class }
	 * 
	 * public static <T> T readObject(File file, Class<T> clazz) throws FileNotFoundException { Input input = new Input(new FileInputStream(file)); T
	 * result = get().readObject(input, clazz); input.close(); return result; }
	 * 
	 * public static <T> void writeObject(T obj, File file) throws FileNotFoundException { Output out = new Output(new FileOutputStream(file));
	 * get().writeObject(out, obj);
	 * 
	 * out.close(); }
	 */

	public static <T> T readObject0(File file, Class<T> clazz) throws FileNotFoundException {
		FileInputStream stream = new FileInputStream(file);
		return readObject0(stream, clazz);
	}

	public static <T> T readObject0(InputStream stream, Class<T> clazz) {
		try (XMLDecoder coder = new XMLDecoder(stream)) {
			Object obj = coder.readObject();
			if (clazz.isAssignableFrom(obj.getClass()))
				return (T) obj;
			else
				throw new RuntimeException("Invalid types! Requested " + clazz + " but read " + obj.getClass());
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	public static <T> void writeObject0(T obj, File file) throws FileNotFoundException {
		FileOutputStream stream = new FileOutputStream(file);
		XMLEncoder coder = new XMLEncoder(stream);
		coder.writeObject(obj);
		coder.flush();
		coder.close();
	}

    public static <T> void writeObject0(OutputStream stream, T obj) {
        XMLEncoder coder = new XMLEncoder(stream);
        coder.writeObject(obj);
        coder.flush();
        coder.close();

    }

	@SuppressWarnings("restriction")
	public static <T> T newInstance(Class<T> clazz) {
		try {
			if (DiploConstants.IS_DESKTOP && MiscUtil.isUnsafeSupported()) {
				return (T) MiscUtil.getUnsafe().allocateInstance(clazz);
			} else {
				return MiscUtil.newInstanceUsingAConstructor(clazz);
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	public static void init() {

	}

}
