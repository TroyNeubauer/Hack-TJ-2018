package com.troy.diplo.server.secutiry;

import java.security.*;
import java.security.spec.*;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

import org.apache.logging.log4j.*;

import com.troy.diplo.game.*;
import com.troy.diplo.server.DiploServer;
import com.troy.diplo.server.database.DatabaseAccount;
import com.troy.diplo.server.settings.CryptoSettings;
import com.troyberry.util.ArrayUtil;

public class Security {

	private static final Logger logger = LogManager.getLogger(Security.class);

	private static final String ALGORITHM = "PBKDF2WithHmacSHA256";
	private static final SecretKeyFactory FACTORY = getAlgorithm();

	public static byte[] secureRandomBytes(int bytes) {
		byte[] result = new byte[bytes];
		new SecureRandom().nextBytes(result);
		return result;
	}

	public static byte[] getHashedPassword(char[] password, byte[] salt, byte[] pepper, int iterations, int derivedKeyLength) {
		byte[] saltPlusPepper = ArrayUtil.concat(salt, pepper);
		KeySpec spec = new PBEKeySpec(password, saltPlusPepper, iterations, derivedKeyLength * 8);

		try {
			return FACTORY.generateSecret(spec).getEncoded();
		} catch (InvalidKeySpecException e) {
			logger.catching(e);
			return null;
		}
	}

	private static SecretKeyFactory getAlgorithm() {
		try {
			return SecretKeyFactory.getInstance(ALGORITHM);
		} catch (NoSuchAlgorithmException e) {
			logger.fatal("Unable to find the required algorithm for hashing a password, " + ALGORITHM);
			logger.catching(e);
		}
		return null;
	}

	private Security() {
	}

	/**
	 * Creates a new DatabaseAccount using the values specified without registering it
	 * 
	 * @param username
	 *            The username of the account
	 * @param password
	 *            The plain-text password of the account
	 * @param email
	 *            The email of the account
	 * @param server
	 *            A reference to the server to obtain helpful information
	 * @return A new unregistered DatabaseAccount
	 */
	public static DatabaseAccount createAccount(String username, char[] password, String email, DiploServer server) {
		for (DatabaseAccount account : TypeLookupFactory.getInstance().getLookup(DatabaseAccount.class).getAll()) {
			if (account.getAccount().getUsername().equals(username)) {
				throw new IllegalArgumentException("User with username " + username + " already exists!");
			}
		}
		CryptoSettings settings = server.getSettings().getSetting(CryptoSettings.class);
		Account account = new Account(TypeLookupFactory.getInstance().getLookup(DatabaseAccount.class).nextUniqueID(), username, email, new Profile());
		account.profile.setAccount(account);
		int iterations = settings.getNowIterations();
		byte[] salt = Security.secureRandomBytes(settings.getSaltBytes());
		byte[] pepper = settings.getPepper();
		byte[] hash = Security.getHashedPassword(password, salt, pepper, iterations, settings.getHashBytes());
		DatabaseAccount result = new DatabaseAccount(account, settings.getNowIterations(), salt, hash);
		return result;
	}

}
;